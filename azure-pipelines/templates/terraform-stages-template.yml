parameters:
  environment: stage
  environmentDisplayName: Staging
  TerraformArguments: ''
  TerraformEnvVariables: {}
  TerraformPlanBranches: 
  - '''refs/heads/master'''
  - '''refs/heads/develop'''

stages:
- stage: Terraform_Plan_${{ parameters.environment }}
  displayName: Plan ${{ parameters.environmentDisplayName }}
  jobs:
  - job: Terraform_Plan
    displayName: Terraform Plan
    pool:
      vmImage: ubuntu-latest
    steps:

    - bash: |
        cp infrastructure/terraform_backend/* infrastructure/terraform
      displayName: Copy terraform backend config to terraform directory
      workingDirectory: $(System.DefaultWorkingDirectory)

    - template: terraform-init-template.yml
      parameters:
        TerraformDirectory: $(System.DefaultWorkingDirectory)/infrastructure/terraform
        environment: ${{ parameters.environment }}
        TerraformPlanBranches: ${{ parameters.TerraformPlanBranches }}

    # Using AzureCLI instead of Terraform extension because of following issues:
    # - https://github.com/microsoft/azure-pipelines-extensions/issues/748
    # - https://github.com/microsoft/azure-pipelines-extensions/issues/725
    # - https://github.com/microsoft/azure-pipelines-extensions/issues/747
    - bash: |
        set -eu
        export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
        terraform plan -input=false -out=tfplan -var environment=${{ parameters.environment }} ${{ parameters.TerraformArguments }}
      displayName: Terraform plan
      # Avoid concurrent Terraform runs on PRs, which would result in failures due to exclusive lock on remote state file.
      condition: and(succeeded(), or(in(variables['Build.SourceBranch'], ${{join(',', parameters.TerraformPlanBranches)}}), variables['RUN_FLAG_TERRAFORM']))
      workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/terraform
      env:
        ${{ parameters.TerraformEnvVariables }}

    - bash: |
        # Save a human-friendly version of the plan with passwords hidden
        terraform show -no-color tfplan > plan.txt
        # Remove terraform plan from published artifacts, as it contains clear-text secrets
        rm tfplan
        # Resource providers can be > 100MB large, we don't want them in the published artifacts.
        rm -r .terraform
      displayName: Save plan text representation
      workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure/terraform

    - task: PublishPipelineArtifact@1
      displayName: Publish Pipeline Artifact
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/infrastructure/terraform
        artifact: terraform_resources_${{ parameters.environment }}

- stage: Terraform_Apply_${{ parameters.environment }}
  displayName: Apply ${{ parameters.environmentDisplayName }}
  jobs:
  - deployment: Apply
    environment: ${{ parameters.environmentDisplayName }}
    displayName: Terraform Apply
    pool:
      vmImage: ubuntu-latest
    strategy:
      runOnce:
        deploy:
          steps:

          - task: DownloadPipelineArtifact@2
            displayName: Download Pipeline Artifact
            inputs:
              artifactName: terraform_resources_${{ parameters.environment }}
              targetPath: $(System.DefaultWorkingDirectory)/terraform_resources

          - template: terraform-init-template.yml
            parameters:
              TerraformDirectory: $(System.DefaultWorkingDirectory)/terraform_resources
              environment: ${{ parameters.environment }}
              provisionStorage: false

          # As the Terraform extension plan task doesn't support -detailed-exitcode
          # (to check if any changes are present), we define an equivalent AzureCLI
          # task instead.
          - bash: |
              set -eu
              export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
              # terraform plan -detailed-exitcode exit codes:
              # 0 - Succeeded, diff is empty (no changes)
              # 1 - Errored
              # 2 - Succeeded, there is a diff
              # >2 - unexpected, crash or bug
              if terraform plan -detailed-exitcode -input=false -out=tfplan -var environment=${{ parameters.environment }} ${{ parameters.TerraformArguments }}; then
                echo "Terraform succeeded with no changes"
                # NB terraform apply should still be run, e.g. if new outputs have been created
              else
                terraform_exitcode=$?
                if [ $terraform_exitcode -eq 2 ]; then
                  echo "Terraform succeeded with updates"
                else
                  echo "ERROR: terraform exited with code $terraform_exitcode"
                  exit 1
                fi
              fi
            displayName: Terraform plan
            condition: and(succeeded(), or(in(variables['Build.SourceBranch'], ${{join(',', parameters.TerraformPlanBranches)}}), variables['RUN_FLAG_TERRAFORM']))
            workingDirectory: $(System.DefaultWorkingDirectory)/terraform_resources
            env:
              ${{ parameters.TerraformEnvVariables }}

          - bash: |
              set -eux  # ensure pipeline stops if terraform fails or diff reports a difference
              terraform show -no-color tfplan > newplan.txt
              diff -u plan.txt newplan.txt
            condition: and(succeeded(), or(in(variables['Build.SourceBranch'], ${{join(',', parameters.TerraformPlanBranches)}}), variables['RUN_FLAG_TERRAFORM']))
            workingDirectory: $(System.DefaultWorkingDirectory)/terraform_resources
            displayName: Ensure plan is unchanged

          - bash: |
              set -eu
              export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
              terraform apply -input=false -auto-approve tfplan
            displayName: Terraform apply
            workingDirectory: $(System.DefaultWorkingDirectory)/terraform_resources

          - bash: |
              set -eu
              terraform output -json | jq -r '
                . as $in
                | keys[] 
                | ["##vso[task.setvariable variable=" + . + ";isOutput=true;isSecret=" + ($in[.].sensitive | tostring) + "]" + ($in[.].value | tostring)]
                | @tsv'
            name: TerraformOutputs
            displayName: Export terraform outputs
            workingDirectory: $(System.DefaultWorkingDirectory)/terraform_resources

  - job: Dummy
    dependsOn: Apply
#    variables:
#    steps: